Thinking about how to make actions work

play_area.play_card is currently hardcoded to just add coins based on card
treasure values.

We don't want to just keep adding more hardcoded values like treasure_value to
cards and then have play_card encode all possible actions, since that will
fall apart pretty quickly.

Introducing CardEffect feels like a step in the right direction, but even now
the logic in play_area.play_card is effectively the same as it would have been
otherwise.

A specific question: where do cards trashed by play_area.play_card go?
Currently the play_area only knows about the specific player's card piles, but
the trash is global to the game (like the supply). So it feels like at some
point we'll need to combine supply+trash+play areas into a more shared concept.

-------------------------------------------------------------------------------

First milestone: got something useful running in main.rs
Next milestone: get some actions working

Random digression: could the game logic work in a way that doesn't block on
agent input? (eg if we wanted to implement a server-based UI)
- eg a coroutine like `let agent_response = yield request;`
  - doesn't seem like rust supports this directly yet
  - is it possible to hack this together using async/await?
- could implement something like how azure durable functions work (I think)
  where the function actually exits at awaits, and then re-runs past previous
  awaits with cached responses.
- or maybe we just end up implementing the state machine manually ourselves?

ultimately the answer is probably to go back to the pure functional redux/elm
style architecture

next:

- Look into improving logging - need more than one kind of GameEvent
  - Some kind of span/context for nested events?
  - could use tracing crates as an inspiration, but they're probably not
    worth trying to use directly
    - agents may want to inspect the current context stack to help make
      decisions (or maybe they just look at the cards in play?)
- Decide if the tests in play_area and card_pile are worth keeping
- Start thinking about how we implement actions
- Think about which actions might be interesting to try
  - Village+Smithy4 should be relatively simple, and sets up a new strategy
  - Chapel: requires a back-and-forth with the agent
    - game asks agent which card to play
    - agent responds with Chapel (or nothing)
    - game asks which cards to trash
      - possibly a generic trash request with selection of cards, plus
        a min/max count of cards that need to and/or can be trashed?
    - agent responds with list of cards
    - some basic intelligence required from the agent: trash lower-value
    treasures but only if the deck has enough higher-value treasures
  - Moat: might be a relatively simple one to start with?
    - especially if we ignore the 'reaction' part at first
  - Harbinger: requires a novel kind of interaction (asking the agent for a
    card it likes from the discard)
- More complex cards which should start being a challenge to model:
  - Attacks like Bandit/Witch (and reactions like Moat)
  - Throne Room with replaying cards and stacked states (Throne Throne Room)
    - Throne Room has a bunch of edge cases described on the wiki
    - start thinking about if we can unit test these in a more focused way
      - do we just rely on log-based snapshot testing for this kind of thing?
  - Library does some interesting things with intermediate card locations
    ("set aside") and a new kind of agent interaction ("do you want to discard
    this?")

-------------------------------------------------------------------------------

Constantly running into issues where it'd really make sense to just give up and
make cards themselves implement Copy. In particular, often running into
situations where we have a CardName but we want to filter cards based on type
or something similar. We could move more and more properties from Card into
CardName (effectively turning it into more of a CardDescriptor) but at what
point does Card just become a thin wrapper around CardName plus ownership?

-------------------------------------------------------------------------------

it's slowly starting to come together! finally working on some win conditions.
returning iterators from functions is kinda complicated

next:

- implement silvers so that someone can actually win in a reasonable amount of
  time
- implement deck shuffling to make things interesting
- then carry on with the below ideas

-------------------------------------------------------------------------------

next:

- implement some kind of win condition
- make a couple more bots
- implement the CLI layer (and remove #![allow(unused)])
- have some fun pitting bots against each other in repeated games

-------------------------------------------------------------------------------

switching to CardName over &Card for identifying cards seems to work for now

- but what about when we really need to point at a specific instance of a card
  rather than a card with a given name? eg for cases like buying Sirens
- let's not worry about that for now

-------------------------------------------------------------------------------

having fun with lifetimes and Supply
- initially I wanted to have Supply.buyable_cards() return a vec of &Card which
  could be used to pick a card, and then a second method which took a &Card and
  actually gave you ownership of that Card out of the supply.
- however there doesn't seem to be a nice way to make the lifetimes work here,
  since the initial list of &Cards requires one borrow of the Supply, and the
  second call is going to require a second (mutable) borrow.
- briefly tried something like the HashMap.entry() api, but I guess this
  doesn't work for addressing more than one entry at a time?

revised design to try next:

- instead of &Card, use some Copy+Eq CardDescriptor struct to name cards
- then a Card becomes a CardDescriptor plus some behaviors

-------------------------------------------------------------------------------

next:

- replace Game.copper_count with some kind of "kingdom" or "supply" concept
- might need a builder to easily set up different test scenarios
  - eg what if there's no copper remaining?
  - how do we present buy options to the agent?
- give players some estates to begin with
- think about adding other cards to buy
  - expand default agent implementation to buy duchy if possible
  - what happens when the agent can't afford it? How do we present that info?

-------------------------------------------------------------------------------

next:
- add input logs / output logs to the game
- start using some snapshot testing

on the interaction between game and player:

- think we need to split up the concept of "agent" (something that makes
  decisions) vs "player" (an agent plus some cards)
- how can borrows work for game.play_one_turn()?
  - the function itself needs to borrow the game as &mut self
  - but we need the agent to try and mutate the game state too
  - play_one_turn can't pass another &mut self borrow to agent.do_actions()
    since it's already got an exclusive borrow of itself.
  - do we need to RefCell a lot to make these kinds of designs work?
  - the easier thing to do would be to ask the agent to return an object
    representing the decision (rather than the agent sending messages to the
    game for its decisions) but that's moving more away from the OOP style.
  - trying to be OOP does feel like we're fighting rust a fair bit - maybe
    it's just not the best language for this style?

seriously considering just falling back to more functional style in order
to get stuff done.

-------------------------------------------------------------------------------

thinking about the design of play_area:
- the abstraction we'd really like to have is something like "card supply" - ie
  a thing that we draw cards from each turn, and then put cards back into.
  That way it's easier to mock out saying "the player draws X cards in this
  particular turn" for other cases.
- it feels maybe a little less OO that way, though? let's keep going with what
  we have and see what happens.

game and play_area are still disjointed. Probably need to do a lot more work
from the game side to try and join them up (or find more useful abstractions to
build)

https://wiki.dominionstrategy.com/index.php/Triggered_effects
https://wiki.dominionstrategy.com/index.php/Turn
https://wiki.dominionstrategy.com/index.php/Gameplay

-------------------------------------------------------------------------------

https://github.com/mitsuhiko/insta could be better for testing actual games as
opposed to individual components.

-------------------------------------------------------------------------------

thinking about how we'd test a game:

- the first thing that happens is shuffling the deck and drawing five cards
  - we need to make sure that the shuffle is deterministic in a test
  - need some kind of seeded random
  - just relying on the seed seems fragile, though - a slight change in the
    shuffle algorithm, the randomness, the deck implementation or something
    else could mean the test breaks
  - plus it's not clear in a test how a seed like "5" means the first turns
    are a 3-4 or 5-2 copper split.
- so trying to rethink this from an OO perspective:
  - what we really want is to be able to say "the player draws these exact
    cards in this order"
  - what we're missing is a Deck abstraction
  - either the deck can be implemented as a proper random deck (with seeding
    still required for undos/replays) or as a test deck which returns certain
    cards in order.

outstanding questions:

- do we model the deck by itself, or is it worth pairing the deck and discard
  pile together?

-------------------------------------------------------------------------------

a bit tough figuring out where to start with the unit tests

jumped from a high-level game test to a card / turnstate test, but don't really
know how to connect the two

should probably back off from the second test and try to actually drive the
design with more high-level tests?

-------------------------------------------------------------------------------

ideas for interesting things to try and model:

- most basic place to start: just basic treasures and victory cards?
    - only need a buy phase
- then maybe some basic actions
    - +1 card +1 action
    - chapel?
- important thing: get good at printing out a log early
- interesting thing to try: recursive cards / action stack?
- interesting thing to try: attack cards
    - giving players a chance to respond to cards
    - callbacks like “some other player has revealed their cards”
- interesting thing to try: duration cards
    - actual duration cards which sit in the ‘set aside’ area until triggered
    - implement cards like Wharf as fake duration cards? eg they leave some kind
      of token in the ‘set aside’ area until triggered
      - in fact making Token a first-class thing like Card could be cool
        - unlike cards, tokens can be created and destroyed
        - tokens can be placed on specific cards or supply piles
        - tokens have some kind of effect which resolves once or multiple times
    - interactivity: choice of which effects to trigger in order
        - could just make this arbitrary to begin with
- interesting thing to try: card which lowers all costs for duration of turn
- interesting rules: https://wiki.dominionstrategy.com/index.php/Stop-moving_rule
  and linked pages
- fun cards to try implementing:
    - extra-turn or skip-turn cards like outpost, lich or **possession**

-------------------------------------------------------------------------------

thinking about possible approaches
mostly OOP vs functional

OOP: card.play(game_state) mutates the game state in whatever way it wants
  - makes implementing undo/rewind tricky  
    (event sourcing might be the solution?)
  - means fewer things have to be explicitly modeled as data
  - might make stacked game states (like in Possession) easier to implement
    by intercepting calls?
functional: playCard(card, game_state) -> (new_game_state, effects)
  - basically the ELM architecture?
  - undo is trivial since the old game state is unaffected
  - could try to use persistent data structures to share data between old and
    new game states

